plot(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & (a_samples_month>=11 | a_samples_month<=2)],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & (a_samples_month>=11 | a_samples_month<=2)], pch="'", ylim=c(0, 1000), xlim=c(-10, 40), col="blue")
points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=5 & a_samples_month<=8],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=5 & a_samples_month<=8], pch="'", col="yellow")
points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=3 & a_samples_month<=4],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=3 & a_samples_month<=4], pch="'", col="green")
points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=9 & a_samples_month<=10],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_month>=9 & a_samples_month<=10], pch="'", col="brown")
abline(a=a_model[i_f, l_time_key_value[[i_time]], 5], b=a_model[i_f, l_time_key_value[[i_time]], 6])
abline(a=(a_model[i_f, l_time_key_value[[i_time]], 5]+a_model[i_f, l_time_key_value[[i_time]], 4]), b=a_model[i_f, l_time_key_value[[i_time]], 6])
abline(a=(a_model[i_f, l_time_key_value[[i_time]], 5]+a_model[i_f, l_time_key_value[[i_time]], 7]), b=a_model[i_f, l_time_key_value[[i_time]], 6])
abline(h=a_model[i_f, l_time_key_value[[i_time]], 1])
abline(h=a_model[i_f, l_time_key_value[[i_time]], 2])
abline(h=a_model[i_f, l_time_key_value[[i_time]], 3])
if (readline("\nType\t<Return> to continue\n\t<Exit> to exit")=="Exit") break
}	}
df_samples_TEST <- read.csv("\\\\polocesena\\polocesena\\UtentiScienze\\PERSONALE\\lorenzo.baldacci3\\Documenti\\Universita\\Convenzioni\\Rinnova_Hera\\1_Data\\3_Estrazioni\\20120601_20130531_Voltana.csv", header=TRUE, dec=".",sep=",")
attach(df_samples_TEST)
a_samples_time <- ORA
a_samples_month <- MESE
a_samples_day_of_week <- TIPO_GIO
a_samples_temp_pre <- T_PRE
a_samples_working_day <- array(1,dim=length(a_samples_day_of_week))
a_samples_working_day[a_samples_day_of_week>=6] <- 2
df_flow_forecasts<-cbind(df_samples_TEST,array(NaN,dim=c(length(a_samples_temp_pre),3)))
names(df_flow_forecasts)[10:12]<-c("P05","MED","P95")
for (i_sample in 1:length(a_samples_temp_pre)){
#P05
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],1]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],4])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,10] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],1]
}else{
df_flow_forecasts[i_sample,10] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],4]
}
#MEDIANA
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],2]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,11] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],2]
}else{
df_flow_forecasts[i_sample,11] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]
}
#P05
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],3]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],7])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,12] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],3]
}else{
df_flow_forecasts[i_sample,12] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],7]
}
}
rm(list = ls())
df_samples <- read.csv("\\\\polocesena\\polocesena\\UtentiScienze\\PERSONALE\\lorenzo.baldacci3\\Documenti\\Universita\\Convenzioni\\Rinnova_Hera\\1_Data\\3_Estrazioni\\20110601_20120531_Voltana.csv", header=TRUE, dec=".",sep=",")
attach(df_samples)
a_samples_time <- ORA
a_samples_month <- MESE
a_samples_day_of_week <- TIPO_GIO
a_samples_temp_ALL <- T_OSS
a_samples_flow_ALL <- Q_OSS
a_samples_working_day <- array(1,dim=length(a_samples_day_of_week))
a_samples_working_day[a_samples_day_of_week>=6] <- 2
par(mfrow=c(1,1))
#Per ogni ora del giorno calcolo la mediana dei valori di portata estivi
a_model <- array(NaN, dim=c(2,length(levels(a_samples_time)),7))
l_time_key_value <- list()
i<-1
for (i_time in levels(a_samples_time)){
l_time_key_value[[i_time]]<-i
i<-i+1
}
for (i_f in 1:2){
for (i_time in levels(a_samples_time)){
a_model[i_f,l_time_key_value[[i_time]],1:3] <- quantile(a_samples_flow_ALL[a_samples_time==i_time & a_samples_month>=5 & a_samples_month<=8 & a_samples_working_day==i_f], c(0.05, 0.5, 0.95))
}	}
a_labels <- array(FALSE, dim=c(length(a_samples_flow_ALL),2))
#Prima colonna per i punti che rientrano nelle medie estive
for (i_f in 1:2){
for (i_time in levels(a_samples_time)){
a_labels[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_flow_ALL<=a_model[i_f,l_time_key_value[[i_time]],3],1] <- TRUE
}	}
#Seconda colonna per i punti outliers
for (i_f in 1:2){
for (i_time in levels(a_samples_time)){
a_labels[a_samples_time==i_time & a_samples_working_day==i_f & a_samples_flow_ALL>a_model[i_f,l_time_key_value[[i_time]],3] & a_samples_month>=5 & a_samples_month<=8,2] <- TRUE
}	}
#Nei mesi invernali calcolo la retta di regressione per il 5o 50o 95o perc
for (i_f in 1:2){
for (i_time in levels(a_samples_time)){
lm.r=lm(a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]~a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]])
a_residuals<-array(NaN,dim=c(length(a_samples_flow_ALL)))
a_residuals[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]<-a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]-(coef(lm.r)[2]*a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]+coef(lm.r)[1])
a_quantile<-quantile(a_residuals[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2] & !is.na(a_residuals)], c(0.05, 0.5, 0.95))
#		plot(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f], pch="'")
#		points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,1]],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,1]], col="red")
#		points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,2]],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,2]], col="green")
#		abline(lm.r)
#		abline(a=coef(lm.r)[1]+a_quantile[1], b=coef(lm.r)[2])
#		abline(a=coef(lm.r)[1]+a_quantile[3], b=coef(lm.r)[2])
#		if (readline("\nType\t<Return> to continue\n\t<Exit> to exit")=="Exit") break
#		plot(a_residuals[!is.na(a_residuals)])
#		if (readline("\nType\t<Return> to continue\n\t<Exit> to exit")=="Exit") break
a_labels[a_residuals<a_quantile[1] | a_residuals>a_quantile[3],2]<-TRUE
lm.r=lm(a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]~a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]])
a_residuals<-array(NaN,dim=c(length(a_samples_flow_ALL)))
a_residuals[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]<-a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]-(coef(lm.r)[2]*a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2]]+coef(lm.r)[1])
a_quantile<-quantile(a_residuals[a_samples_time==i_time & a_samples_working_day==i_f & !a_labels[,1] & !a_labels[,2] & !is.na(a_residuals)], c(0.05, 0.5, 0.95))
#		plot(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f], pch="'")
#		points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,1]],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,1]], col="red")
#		points(a_samples_temp_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,2]],a_samples_flow_ALL[a_samples_time==i_time & a_samples_working_day==i_f & a_labels[,2]], col="green")
#		abline(lm.r)
#		abline(a=coef(lm.r)[1]+a_quantile[1], b=coef(lm.r)[2])
#		abline(a=coef(lm.r)[1]+a_quantile[3], b=coef(lm.r)[2])
#		if (readline("\nType\t<Return> to continue\n\t<Exit> to exit")=="Exit") break
#		plot(a_residuals[!is.na(a_residuals)])
#		if (readline("\nType\t<Return> to continue\n\t<Exit> to exit")=="Exit") break
a_model[i_f,l_time_key_value[[i_time]],4] <- a_quantile[1]
a_model[i_f,l_time_key_value[[i_time]],5:6] <- coef(lm.r)
a_model[i_f,l_time_key_value[[i_time]],7] <- a_quantile[3]
}	}
df_samples_TEST <- read.csv("\\\\polocesena\\polocesena\\UtentiScienze\\PERSONALE\\lorenzo.baldacci3\\Documenti\\Universita\\Convenzioni\\Rinnova_Hera\\1_Data\\3_Estrazioni\\20120601_20130531_Voltana.csv", header=TRUE, dec=".",sep=",")
attach(df_samples_TEST)
a_samples_time <- ORA
a_samples_month <- MESE
a_samples_day_of_week <- TIPO_GIO
a_samples_temp_pre <- T_PRE
a_samples_working_day <- array(1,dim=length(a_samples_day_of_week))
a_samples_working_day[a_samples_day_of_week>=6] <- 2
df_flow_forecasts<-cbind(df_samples_TEST,array(NaN,dim=c(length(a_samples_temp_pre),3)))
names(df_flow_forecasts)[10:12]<-c("P05","MED","P95")
for (i_sample in 1:length(a_samples_temp_pre)){
#P05
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],1]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],4])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,10] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],1]
}else{
df_flow_forecasts[i_sample,10] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],4]
}
#MEDIANA
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],2]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,11] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],2]
}else{
df_flow_forecasts[i_sample,11] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]
}
#P05
if (a_samples_temp_pre[i_sample]>((a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],3]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]-a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],7])/a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6])){
df_flow_forecasts[i_sample,12] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],3]
}else{
df_flow_forecasts[i_sample,12] <- a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],6]*a_samples_temp_pre[i_sample]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],5]+a_model[a_samples_working_day[i_sample], l_time_key_value[[a_samples_time[i_sample]]],7]
}
}
write.csv(df_flow_forecasts,  file="\\\\polocesena\\polocesena\\UtentiScienze\\PERSONALE\\lorenzo.baldacci3\\Documenti\\Universita\\Convenzioni\\Rinnova_Hera\\1_Data\\2_Elaborazioni\\MODELLO_6\\20120601_20130531_Voltana_V2.1.3.csv", col.names=TRUE, dec=".",sep=",",row.names=FALSE)
qnorm(p, mean = 0, sd = 1, lower.tail = TRUEqnorm(p, mean = 0, sd = 1, lower.tail = TRUE
;
qnorm(0.5, mean = 0, sd = 1, lower.tail = TRUE)
qnorm(93, mean = 100, sd = 10, lower.tail = TRUE)
pnorm(93, mean = 100, sd = 10, lower.tail = TRUE)
pnorm(95, mean = 100, sd = 10, lower.tail = TRUE)
qnorm(95, mean = 100, sd = 10, lower.tail = TRUE)
dnorm(95, mean = 100, sd = 10, lower.tail = TRUE)
dnorm(95, mean = 100, sd = 10)
pnorm(0.95, mean = 100, sd = 10, lower.tail = TRUE)
qnorm(0.95, mean = 100, sd = 10, lower.tail = TRUE)
rnorm(50,100,10)
round(qnorm(.95, mean = 100, sd = 10 / sqrt(50) ), 3)
qnorm(.95, mean = 100, sd = 10 / sqrt(50) )
pbinom(4, prob = .5, size = 6, lower.tail = FALSE)
qnorm(.51, mean = 0.5, sd = 1/(12*sqrt(100) ))
pnorm(.51, mean = 0.5, sd = 1/(12*sqrt(100) ))
pnorm(.51, mean = 0.5, sd = 1/(12*sqrt(100) ), lower.tail=FALSE)
pnorm(.51, mean = 0.5, sd = 1/(12*100) ), lower.tail=FALSE)
pnorm(.51, mean = 0.5, sd = 1/(12*100), lower.tail=FALSE)
pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
var(1,2,3,4,5,6)
var(c(1,2,3,4,5,6))
sd(c(1,2,3,4,5,6))
mean((1 : 6 - 3.5)^2)
((1 : 6 - 3.5)^2)/6
((1 : 6 - 3.5)^2)
(1 : 6 - 3.5)
sum((1 : 6 - 3.5)^2)
sum((1 : 6 - 3.5)^2)/6
ppois(20,lambda=16.5,lower.tail=TRUE)
ppois(20, lambda = 16.5 * 2)
ppois(20,lambda=16.5*2,lower.tail=TRUE)
(.88 * .95) / (.88 * .95 + .07 * .05)
(.52 * .75) / (.52 * .75 + .25 * .30)
1-((.52 * .75) / (.52 * .75 + .25 * .30))
pnorm(70, mean=80, sd=10, lower.tail=TRUE)
qnorm(0.95, mean=1100, sd=75)
qnorm(0.95, mean=1100, sd=75/sqrt(100))
pbinom(3,prob=.5, size=5, lower.tail=FALSE)
pnorm(14, mean = 15, sd = sqrt(10 / 100), lower.tail = FALSE)
pnorm(16, mean = 15, sd = sqrt(10 / 100), lower.tail = FALSE)
0.9992173-0.0007827011
qnorm(.5, mean=.5, sd=sqrt(1/12/1000))
1/12
ppois(10, 5*3)
factorial(9)
factorial(9)/(factorial(3)*factorial(6))
pbinom(14, mean = 15, sd = sqrt(10 / 100), lower.tail = FALSE)
install.packages(c("Matrix", "yaml"), lib="C:/Program Files/R/R-3.0.3/library")
mn <- mean(mtcars$mpg); s <- sd(mtcars$mpg); z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
pnorm(mean = 3, sd = 1.1)
mn <- mean(mtcars$mpg); s <- sd(mtcars$mpg); z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
mu0 <- mn - z * s / sqrt(nrow(mtcars))
mu0 <- 3 - z * 1.1 / sqrt(100)
z <- qnorm(.95)
mu0 <- 3 - z * 1.1 / sqrt(100)
mu1 <- 3 - qnorm(.95) * 1.1 / sqrt(100)
mu0 <- 3 - qnorm(.05) * 1.1 / sqrt(100)
ans <- round(pbinom(54, prob = .5, size = 100, lower.tail = FALSE),4)
pbinom(54, prob = .5, size = 100, lower.tail = FALSE)
pv <- ppois(15800 - 1, lambda = 520 * 30, lower.tail = FALSE)
pnorm(15800 / 30, mean = 520, sd = sqrt(520 / 30), lower.tail = FALSE)
power <- pnorm(10 + qnorm(.95) * .4, mean = 11, sd = .4, lower.tail = FALSE)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
mtcars
data(mtcars)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
mpg8
mpg8<-mtcars$mpg[mtcars$cyl==8]
mpg6<-mtcars$mpg[mtcars$cyl==6]
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
n6<-length(mpg6)
n8<-length(mpg8)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
s6<-sd(mpg6)
s8<-sd(mpg8)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
m6<-mean(mpg6)
m8<-mean(mpg8)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
n8<-length(mpg8)
12+qnorm(.95)*4/sqrt(100)
bl=c(140, 138, 150, 148, 135)
w2=c(132, 135, 151, 146, 130)
m_bl=mean(bl)
m_w2=mean(w2)
n=5
sd_bl=sd(bl)
sd_w2=sd(w2)
s=sqrt((sd_bl^2)/2+(sd_w2^2)/2)
z=(m_w2-m_bl)/(s*sqrt(2/5))
pnorm(-abs(z))
t.test(bl, w2, paired = F, alternative = "two.sided")
t.test(bl, w2, paired = F, alternative = "two.sided", var.equal = F)
t.test(bl, w2, paired = F, alternative = "two.sided", var.equal = T)
2*pnorm(-abs(z))
t.test(bl, w2, paired = T, alternative = "two.sided", var.equal = F)
qnorm(0.05)
1100-(qnorm(0.05)*30/sqrt(9))
1100-(qnorm(0.05)*30/sqrt(9))
1100-(qnorm(0.95)*30/sqrt(9))
1100-(qnorm(0.05)*30/sqrt(9))
1100+(qnorm(0.95)*30/sqrt(9))
qnorm(0.95)
qnorm(0.05)
pbinom(3,size = 4, prob = 0.5, lower.tail = F)
pbinom(2,size = 4, prob = 0.5, lower.tail = F)
s=sqrt(1.8^2/2+1.5^2/2)
z=-4/s*sqrt(2/9)
pnorm(-abs(z))
qnorm(0.05)
pnorm(0.01+qnorm(0.05)*0.04, 0, sd = 0.04, lower.tail = T)
pnorm(0.01+qnorm(0.05)*0.04, 0, sd = 0.04, lower.tail = F)
pnorm(0.01+qnorm(0.05)*0.04, 0, sd = 0.04, lower.tail = F)
pnorm(0.01+qnorm(0.05)*0.04, mean = 0, sd = 0.04, lower.tail = F)
pnorm(-0.01+qnorm(0.05)*0.04, mean = 0, sd = 0.04, lower.tail = F)
pnorm(0.01+qnorm(0.95)*0.04, mean = 0, sd = 0.04, lower.tail = F)
pnorm(0.01+qnorm(0.95)*0.04, mean = 0, sd = 0.04, lower.tail = T)
pnorm(0.01+qnorm(0.05)*0.04, mean = 0, sd = 0.04, lower.tail = F)
n <- (qnorm(.95) + qnorm(.8)) ^ 2 * .04 ^ 2 / .01^2
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
n <- (qnorm(.95) + qnorm(.1)) ^ 2 * .04 ^ 2 / .01^2
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
se<-12*sqrt(2/288)
ts<-42.04-44
ts<-(42.04-44)/se
2*pnorm(-abs(ts))
12+qnorm(.95)*4/sqrt(100)
12+qnorm(.05)*4/sqrt(100)
ppois(9, 1787/100,lower.tail = T)
ppois(9, 1787/100,lower.tail = F)
ppois(9, 1787/100,lower.tail = T)
1787/100
ppois(10, 1787/100,lower.tail = T)
s=sqrt(1.8^2/2+1.5^2/2)
z=-4/s*sqrt(2/9)
pnorm(-abs(z))
z=4/s*sqrt(2/9)
pnorm(-abs(z))
pnorm(-abs(z))
pnorm(abs(z))
pnorm(-abs(z))
s=sqrt(1.8^2/2+1.5^2/2)
1.8^2
1.5^2
s
sqrt(2/9)
sqrt(1/9)
s
z=-4/s*sqrt(2/9)
z
pnorm(-abs(z))
2*pnorm(-abs(z))
z=-4/s*sqrt(1/18)
z
pnorm(-abs(z))
pnorm(abs(z))
s=sqrt(1.8^2/2+1.5^2/2)
z=-4/s*sqrt(18)
pnorm(abs(z))
pnorm(-abs(z))
2*pnorm(-abs(z))
z=-4/s*sqrt(9)
2*pnorm(-abs(z))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
sum(x*w)
sum(x*w)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
points(c(0,0))
plot(c(0,x),c(0,y)
)
plot(c(0,x),c(0,y))
xc<- x-mean(x)
yc<- y-mean(y)
sum(yc*xc)/sum(xc^2)
sum(yc*xc)/sum(yc^2)
data(mtcars)
mtcars
plot(mtcars$wt, mtcars$mpg)
lm(mtcars$wt ~ mtcars$mpg)
lm(mtcars$mpg ~ mtcars$wt)
5*4/6
5*4/2
5*6/4
5*2/4
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
sd(x)
x-mean(x)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
xc<- x-mean(x)
yc<- y-mean(y)
sum(yc*xc)/sum(yc^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(y*x)/sum(y^2)
sum(y*x)/sum(x^2)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
dataset(airquality)
library(airquality)
library(rChart)
library("rChart")
install.packages("rChart")
require(rCharts)
library(rCharts)
library("rCharts")
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("devtools")
datasets
?datasets
library(help = "datasets")
occupationalStatus
LakeHuron
Puromycin
ToothGrowth
cars
cars
ToothGrowth
cars
AirPassengers
diamonds
library(shiny)
library(ggplot2)
dataset <- diamonds
View(dataset)
dataset <- AirPassengers
diamonds
class(diamonds)
class(AirPassengers)
class(as.data.frame(AirPassengers))
dataset <- as.data.frame(AirPassengers)
View(dataset)
mtcars
dataset <- mtcars
View(dataset)
head(dataset)
ds<-diamonds
head(ds)
diamonds
nrow(diamonds)
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
nrow(dataset)
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
shiny::runApp('C:/app/R/Coursera/Develop Data Products/Project')
setwd("C:/app/R/Coursera/9. Develop Data Products/Slidify_Presentation")
library(slidify)
slidify("index.Rmd")
setwd("C:/app/R/Coursera/9. Develop Data Products/RStudio_Presentation")
Sys.Date()
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
options
options()
setwd("C:/app/R/Coursera/9. Develop Data Products/Project_Dev_Data_Products")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ggplot(mtcars, aes_string(x=input$x, y=input$y))
ggplot(mtcars, aes_string(x=mpg, y=hp))
ggplot(mtcars, aes_string(x="mpg", y="hp"))
ggplot(mtcars, aes_string(x=input$x, y=input$y)) + geom_point() + ggtitle(paste("This is your plot no:",count))
ggplot(mtcars, aes_string(x="mpg", y="hp")) + geom_point() + ggtitle(paste("This is your plot no:",count))
count<-0
ggplot(mtcars, aes_string(x="mpg", y="hp")) + geom_point() + ggtitle(paste("This is your plot no:",count))
ggplot(mtcars, aes_string(x="mpg", y="hp"))  + geom_blank() + ggtitle(paste("This is your plot no:",count))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
